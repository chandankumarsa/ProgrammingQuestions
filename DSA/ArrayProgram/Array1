Q-print Even Element in a Given Array

public class PrintEvenElementArray {
    public static void main(String[] args) {
        int arr[] = {1, 2, 3, 4, 5, 6};
        for (int n : arr) {
            if (n % 2 == 0) {
                System.out.println(n);
            } 
        }
    }
}

------------------------------------------
Q-Print the Sum of Even Odd in a given Array

public class SumEvenOdd {
    public static void main(String[] args) {
        int arr[] = {1, 2, 3, 4, 5, 67, 8, 9};
        int evenSum = 0, oddSum = 0;
        
        for (int n : arr) {
            if (n % 2 == 0) {
                evenSum += n;
            } else {
                oddSum += n;
            }
        }
        
        System.out.println("Sum of even numbers: " + evenSum);
        System.out.println("Sum of odd numbers: " + oddSum);
    }
}
------------------------------------------------------------
Q-Print Odd Index element in a Given Array

public class PrintOddIndexElements {
    public static void main(String[] args) {
        int arr[] = {1, 2, 3, 4, 5, 6};
        
        for (int i = 1; i < arr.length; i += 2) { // Start from index 1 and increment by 2
            System.out.println(arr[i]);
        }
    }
}
------------------------------------------------------------------
Q-Print Maximum Element in Given Array

public class PrintMaxElementArray {
    public static void main(String[] args) {
        int a[] = {1, 2, 3, 4, 5, 6};
        int max = a[0];

        for (int n : a) {
            if (n > max) {
                max = n;
            }
        }

        System.out.println("Maximum element in the given array: " + max);
    }
}
------------------------------------------------------------------------
Q-Print Minimum Element in Given Array

public class MinimumElementArray {
	public static void main(String[] args) {
		int a[] = { 3, 4, 5, 6, 7, 2 };
		int min = Integer.MAX_VALUE;
		for (int n : a) {
			if (n < min) {
				min = n;
			}
		}
		System.out.println("Minimum Element of an array: " + min);
	}
}
-----------------------------------------------------------------
Q-Print Secound Maximum Element in a Given Array

public class SecMaxElementArray {
	public static void main(String[] args) {
		int a[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
		int max = Integer.MIN_VALUE;
		int max2 = Integer.MIN_VALUE;

		for (int i = 0; i < a.length; i++) {
			if (a[i] > max) {
				max2 = max;
				max = a[i];
			} else if (a[i] > max2 && a[i] != max) {
				max2 = a[i];
			}
		}

		System.out.println("The second maximum element is: " + max2);
	}
}
----------------------------------------------------------------------------
Q-Print Secound Minimum Element in a Given Array


public class SecMinimumElementArray {
    public static void main(String[] args) {
        int a[] = {1, 2, 3, 4, 5, 6};
        int min = Integer.MAX_VALUE;
        int secmin = Integer.MAX_VALUE;
        
        for (int i = 0; i < a.length; i++) {
            if (a[i] < min) {
                secmin = min;
                min = a[i];
            } else if (a[i] < secmin && a[i] != min) {
                secmin = a[i];
            }
        }
        
        System.out.println("Minimum: " + min);
        
        if (secmin == Integer.MAX_VALUE) {
            System.out.println("Second minimum does not exist.");
        } else {
            System.out.println("Second minimum: " + secmin);
        }
    }
}
-------------------------------------------------------------------------------
Q-Shift all 0 Element to Left  side

import java.util.Arrays;
public class ShiftZeroLeftside {
public static void main(String[] args) {
	int a[]= {1,0,3,0,5,6,0,7,0,9};
	int b[]=new int[a.length];
	int j =b.length-1;
	for(int i =a.length-1;i>=0;i--) {
		if(a[i]!=0) {
			b[j]=a[i];
			j--;
		}
	}
	System.out.println(Arrays.toString(b));
}
}
----------------------------------------------------------------------------------------
Q-Shift all 0 Element to Right  side

import java.util.Arrays;

public class ShiftZerorightside {
public static void main(String[] args) {
	int a[]= {1,0,3,0,5,6,0,7,0,9};
	int b[]=new int[a.length];
	int j =0;
	for(int i=0;i<a.length;i++) {
		if(a[i]!=0) {
			b[j]=a[i];
			j++;
		}
	}
	System.out.println(Arrays.toString(b));
}
}
--------------------------------------------------------------------------------------------
Q-Sum of two Unequal Array  |Condition without creating new Array

import java.util.Arrays;

public class SumOfTwoUnequalArray {
	public static void main(String[] args) {
		int[] a = { 1, 2, 3 };
		int[] b = { 1, 2, 3, 4, 5, 6 };
		int n = a.length < b.length ? a.length : b.length;

		for (int i = 0; i < n; i++) {
			if (a.length > b.length)
				a[i] = b[i] + a[i];
			else
				b[i] = b[i] + a[i];
		}

		String res = a.length > b.length ? Arrays.toString(a) : Arrays.toString(b);
		System.out.println(res);
	}
}
---------------------------------------------------------------------------------------
Q-Linear Search
public class Linearsearch {
    public static void main(String[] args) {
        int a[] = {5, 3, 7, 8, 9, 1};
        System.out.println(find(a, 8));
    }

    static int find(int[] a, int key) {
        for (int i = 0; i < a.length; i++) {
            if (a[i] == key) return i;
        }
        return -1;
    }
}
-------------------------------------------------------------------------------------------
Q-Binary Search
public class BinarySearch {
public static void main(String[] args) {
	int a[]= {2,4,6,8,10,12};
	System.out.println(search(a, 10));
}
public static int search(int[]a,int key) {
	int st =0;
	int end =a.length-1;
	while(st<=end) {
		int mid =(st+end)/2;
		if(key ==a[mid])return mid;
		else if(key<a[mid]) 
			end =mid-1;
			else if(key>a[mid])
				st=mid+1;
		}
		return -1;
	}
}
-------------------------------------------------------------------------------------
Q-BinarySearch Using Recurssion

public class BinarySearchUsingRecurssion {
public static void main(String[] args) {
	int a[]= {20,40,60,80,90};
	System.out.println(search(a, 60, 0, a.length-1));
}
public static int search(int[]a,int key,int st,int end) {
	if(st>end)return -1;
	int mid =(st+end)/2;
	if(key==a[mid])return mid;
	else if(key<a[mid])
		return search(a, key, st, mid-1);
	return search(a, key, mid+1, end);
}
}
-----------------------------------------------------------------------------------------
Q-Remove DuplicateElementGivenArray

public class DuplicateElementGivenArray {
public static void main(String[] args) {
	int a[]= {1,2,3,4,5,3,2};
	int max =Integer.MAX_VALUE;
	for(int i =0;i<a.length;i++) {
		if(a[i]==max)continue;
		for(int j =i+1;j<a.length;j++) {
			if(a[i]==a[j]) {
				a[j]=max;
			}
		}
		System.out.println(a[i]);
	}
}
}
---------------------------------------------------------------------------------------------
Q-Print Unique Element in a given Arrays

public class UniqueElementsArray {
    public static void main(String[] args) {
        int a[] = {1, 2, 3, 4, 5, 3, 2, 6, 7, 7};

        for (int i = 0; i < a.length; i++) {
            int count = 0;
            for (int j = 0; j < a.length; j++) {
                if (a[i] == a[j]) {
                    count++;
                }
            }
            if (count == 1) { // Element appears only once
                System.out.print(a[i] + " ");
            }
        }
    }
}
